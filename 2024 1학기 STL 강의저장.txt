===================================
src\main.cpp03/07/24 Thursday 13:53:31
===================================
/**
* file을 save하는 함수 제작
*/

#include <iostream>
#include <string>
#include <fstream>
#include <print>
#include <vector>
#include <chrono>
#include <algorithm>
#include <format>

void save(std::string_view);

int main()
{
	std::cout << "2024 STL" << std::endl;
	save("src\\main.cpp");
}

void save(std::string_view fileName)
{
	// filename을 읽기 전용으로 연다
	std::ifstream in{fileName.data()};
	if (!in) {
		std::println("save(): Failed to open {}", fileName);
		exit(0);
	}

	// filename의 정보를 확인
	// std::println("{}", sizeof in);
	// std::println("{}", typeid(in).name());

	// 저장할 파일 이름
	std::ofstream out{ "2024 1학기 STL 강의저장.txt", std::ios::app };

	// 읽을 파일의 내용을 읽어 쓸 파일
	// STL 자료구조와 알고리즘을 이용하여 기록한다 (좋은건 아니다) 
	std::vector<char> v{ std::istreambuf_iterator<char>{in}, {} };

	// 현재 time_point를 얻는다.
	auto now = std::chrono::system_clock::now(); // epoch

	// UTC 시간 형식으로 변환
	auto utc = std::chrono::system_clock::to_time_t(now);

	// 현지 시간으로 변환
	auto lt = std::localtime(&utc);

	// 한국 형식으로 출력한다. (출력스트림의 지역을 변환)
	auto old = out.imbue(std::locale("ko_KR"));

	// 시간을 기록한다.
	out.imbue(old);


	out << "===================================" << std::endl;
	out << fileName << std::put_time(lt, "%x %A %X") << std::endl;
	out << "===================================" << std::endl;

	std::copy(v.begin(), v.end(), std::ostreambuf_iterator<char>{ out });
}

===================================
src\save.cpp 03/07/24 Thursday 14:09:20
===================================
#include <string>
#include <fstream>
#include <print>
#include <vector>
#include <chrono>
#include <algorithm>

#include "save.h"

void save(std::string_view fileName)
{
	// filename을 읽기 전용으로 연다
	std::ifstream in{ fileName.data() };
	if (!in) {
		std::println("save(): Failed to open {}", fileName);
		exit(0);
	}

	// filename의 정보를 확인
	// std::println("{}", sizeof in);
	// std::println("{}", typeid(in).name());

	// 저장할 파일 이름
	std::ofstream out{ "2024 1학기 STL 강의저장.txt", std::ios::app };

	// 읽을 파일의 내용을 읽어 쓸 파일
	// STL 자료구조와 알고리즘을 이용하여 기록한다 (좋은건 아니다) 
	std::vector<char> v{ std::istreambuf_iterator<char>{in}, {} };

	// 현재 time_point를 얻는다.
	auto now = std::chrono::system_clock::now(); // epoch

	// UTC 시간 형식으로 변환
	auto utc = std::chrono::system_clock::to_time_t(now);

	// 현지 시간으로 변환
	auto lt = std::localtime(&utc);

	// 한국 형식으로 출력한다. (출력스트림의 지역을 변환)
	auto old = out.imbue(std::locale("ko_KR"));

	// 시간을 기록한다.
	out.imbue(old);


	out << "===================================" << std::endl;
	out << fileName << " " << std::put_time(lt, "%x %A %X") << std::endl;
	out << "===================================" << std::endl;

	std::copy(v.begin(), v.end(), std::ostreambuf_iterator<char>{ out });
}
===================================
src\save.h 03/07/24 Thursday 14:09:20
===================================
#pragma once
#include <string_view>

/**
* @brief
* 강의 내용을 저장한다
* 
* @param
* 저장할 파일 이름
*/
void save(std::string_view);
===================================
src\main.cpp 03/07/24 Thursday 14:09:20
===================================
#include "save.h"

#include <iostream>

int main()
{
	std::cout << "2024 STL" << std::endl;
	save("src\\save.cpp");
	save("src\\save.h");
	save("src\\main.cpp");
}
===================================
src\main.cpp 03/07/24 Thursday 14:35:33
===================================
#include <iostream>
#include "save.h"


/**
* [문제] main을 변경하지 않고 의도대로 실행되도록 change()을 선언하고 정의하라.
*/

template <typename T>
inline void change(T&, T&);

int main()
{
	int a{ 1 }, b{ 2 };

	change(a, b);
	std::cout << a << " " << b << std::endl;
	save("src\\main.cpp");
}

template <typename T>
inline void change(T& a, T& b)
{
	std::swap<T>(a, b);
}
===================================
src\main.cpp 03/07/24 Thursday 15:02:36
===================================
#include <iostream>
#include "save.h"


/**
* [문제] main을 변경하지 않고 의도대로 실행되도록 change()을 선언하고 정의하라.
*/

class Dog {
private:
	int value;

public:
	Dog(int _value)
		: value(_value)
	{}

	friend std::ostream& operator<<(std::ostream& out, const Dog& dog) {
		out << dog.value;
		return out;
	}
};


template <typename T>
inline void change(T&, T&);

// 함수의 시작 주소가 CODE영역에 있다.
int main()
{
	// 지역 변수는 STACK에 생성된다.
	Dog a{ 1 }, b{ 2 };

	// CODE에 있는 change 함수로 가기 전 STACK에 진행상황 저장
	change(a, b);

	std::cout << a << " " << b << std::endl;
	save("src\\main.cpp");
}

template <typename T>
inline void change(T& a, T& b)
{
	std::swap<T>(a, b);
}
