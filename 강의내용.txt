== 3/5 1.1 ==
기존 c++
- class : function / variable
- 자료 생성 방법 1. STACK 2.DATA 3. Free Store
- generic -> template 


기존 c++
특정 자료형에 집중


STL
특정 자료형과 무관
자료구조 + 알고리즘
* 자료의 갯수가 많다

== 3/7 1.2 ==
c++ PL(Paradigm)
- object oriented: 특정 자료형에 중점(특정 자료형을 어떻게 만들것인지?)

- Generic: 특정 자료형과 무관한 코딩
 -> template

 함수 -> 알고리즘
 클래스 -> data structure

* 접점: 비슷한 클래스가 많을 때 이를 Generic으로 처리 가능한가?

== 3/12 2.1 ==

Low <---------------------------> High
STACK /     Free store     / DATA / CODE

CODE영역에서의 change(int&, int&)와 change(Dog&, Dog&)는 다르다.
왜 함수 오버로딩이 가능한가?
 -> 컴파일러가 name mangling을 하기 때문.

- array
int a[100];

중요! contiguous memory: 공간의 연속 메모리
+ continuous: 시간의 연속

장점: 특정 메모리를 access하는데 O(1)의 시간이 걸린다.
+ cash hit


== 3/14 2.2 ==

array<int, 100>

이 메모리를 문자 말고 그대로 저장할 순 없을까?

-> 저수준 출력
함수(어디에?, 뭘?)
(out, a.data(), 400)(가장 효율적인 코드) -> cpu가 개입하지 않는 명령어 -> DMA

File I/O

Open mode:
1. text mode 로 열게 되면 (0x0A -> 0x0A0D)	->	high(가공)
2. binary mode 변형 없이 그대로			-\>	low(read, write)





